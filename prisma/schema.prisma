generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id        String  @id
  street    String
  number    Int
  zipCode   String
  floor     Int
  apartment String
  city      String
  profileId String  @unique
  Profile   Profile @relation(fields: [profileId], references: [id])
}

model Author {
  id          Int    @id @default(autoincrement())
  name        String
  nationality String
  Book        Book[]
}

model Book {
  id             Int              @id @default(autoincrement())
  synopsis       String
  sellPrice      Float
  authorId       Int
  loanPrice      Float
  title          String
  type           String
  Author         Author           @relation(fields: [authorId], references: [id])
  EditorialBooks EditorialBooks[]
  Loan           Loan[]
  Sell           Sell[]
  Category       Category[]       @relation("categories_books")
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  Book        Book[] @relation("categories_books")
}

model Editorial {
  id             Int              @id @default(autoincrement())
  name           String
  phone          String
  email          String
  EditorialBooks EditorialBooks[]
}

model EditorialBooks {
  bookId      Int
  editorialId Int
  stock       Int
  Book        Book      @relation(fields: [bookId], references: [id])
  Editorial   Editorial @relation(fields: [editorialId], references: [id])

  @@id([bookId, editorialId])
}

model Loan {
  id      String     @id
  date    DateTime
  dueDate DateTime
  userId  String
  bookId  Int
  cost    Float
  status  LoanStatus @default(PENDING)
  Book    Book       @relation(fields: [bookId], references: [id])
  User    User       @relation(fields: [userId], references: [id])
}

model Profile {
  id        String   @id
  firstname String
  lastname  String
  dni       String
  phone     String
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id])
  Address   Address?
}

model Sell {
  id     String   @id
  userId String
  bookId Int
  amount Float
  date   DateTime
  Book   Book     @relation(fields: [bookId], references: [id])
  User   User     @relation(fields: [userId], references: [id])
}

model User {
  id      String   @id
  email   String   @unique
  balance Float
  role    Role
  Loan    Loan[]
  Profile Profile?
  Sell    Sell[]
}

enum LoanStatus {
  PENDING
  RETURNED
  NOT_RETURNED
}

enum Role {
  ADMIN
  CLIENT
}
